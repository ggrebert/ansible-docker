variables:
  DOCKER_DRIVER: overlay2

stages:
  - build
  - security

.build: &build
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - export IMAGE_VERSION=$( set -- $CI_JOB_NAME && echo $2 )
    - export PYTHON_VERSION=$( set -- $CI_JOB_NAME && echo $3 )
    - export ANSIBLE_PIP_VERSION=$( set -- $CI_JOB_NAME && echo $4 )
    - >
      if [ "$CI_COMMIT_REF_NAME" == "master" ]; then
        export CI_APPLICATION_REPOSITORY=${CI_REGISTRY_IMAGE}
      else
        export CI_APPLICATION_REPOSITORY=${CI_REGISTRY_IMAGE}/${CI_COMMIT_REF_SLUG}
      fi
    - >
      docker build \
        -t ${CI_APPLICATION_REPOSITORY}:${IMAGE_VERSION} \
        --build-arg python_version=${PYTHON_VERSION} \
        --build-arg ansible_pip_version=${ANSIBLE_PIP_VERSION} \
        .
    - docker run -t --rm ${CI_APPLICATION_REPOSITORY}:${IMAGE_VERSION}
    - docker push ${CI_APPLICATION_REPOSITORY}:${IMAGE_VERSION}

.clair: &clair
  stage: security
  image: docker:stable
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - >
      if [ "$CI_COMMIT_REF_NAME" == "master" ]; then
        export CI_APPLICATION_REPOSITORY=${CI_REGISTRY_IMAGE}
      else
        export CI_APPLICATION_REPOSITORY=${CI_REGISTRY_IMAGE}/${CI_COMMIT_REF_SLUG}
      fi
    - export IMAGE_VERSION=$( set -- $CI_JOB_NAME && echo $2 )
    - docker run -d --name db arminc/clair-db:latest
    - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.6
    - apk add -U wget ca-certificates
    - docker pull ${CI_APPLICATION_REPOSITORY}:${IMAGE_VERSION}
    - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    - mv clair-scanner_linux_amd64 clair-scanner
    - chmod +x clair-scanner
    - touch clair-whitelist.yml
    - while( ! wget -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; done
    - retries=0
    - echo "Waiting for clair daemon to start"
    - while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
    - ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml ${CI_APPLICATION_REPOSITORY}:${IMAGE_VERSION} || true
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json

build latest 3: *build
build pyhon3-latest 3: *build
build pyhon3.6-latest 3.6: *build
build pyhon3.7-latest 3.7: *build
build pyhon2-latest 2: *build
build 2 3 <3: *build
build 2.7 3 <2.8: *build
build 2.8 3 <2.9: *build

build latest: *clair
